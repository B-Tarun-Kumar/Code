import java.util.*;
public class Solution {
	public static boolean soln(int i,int target,int arr[],int dp[][]){
        if(target==0){
			return true;
		}
		if(i==0){
			return arr[0]==target;
		}
		if(dp[i][target]!=-1){
			return dp[i][target]==1?true:false;
		}
		boolean notake=soln(i-1,target,arr,dp);
		boolean take=false;
		if(arr[i]<=target){
			take=soln(i-1,target-arr[i],arr,dp);
		}
		dp[i][target]=take||notake?1:0;
		return take||notake;
	}
	public static boolean canPartition(int[] arr, int n) {
		// Write your code here.
		int sum=0;
		for(int i=0;i<n;i++){
			sum+=arr[i];
		}
		
		if(sum%2==1){
          return false;
		}
		else{
		int target=sum/2;
		int dp[][]=new int[n][target+1];
		for(int arr1[]:dp){
			Arrays.fill(arr1,-1);
		}
		return soln(n-1,target,arr,dp);
		}

	}
}
