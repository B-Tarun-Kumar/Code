import java.util.* ;
import java.io.*; 
public class Solution {
	static int mod=(int)(1e9+7);
	public static int soln(int i,int target,int arr[],int dp[][]){
		if(i==-1){
			if(target==0){
				return 1;
			}
			else{
				return 0;
			}
		}
        
		if(dp[i][target]!=-1){
			return dp[i][target];
		}
		int notake=soln(i-1,target,arr,dp);
		int take=0;
		if(arr[i]<=target){
			take=soln(i-1,target-arr[i],arr,dp);
		}
		return dp[i][target]= (take+notake)%mod;
	}
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		int sum=0;
		for(int i=0;i<n;i++){
			sum+=arr[i];
		}
		if((sum-d<0) || ((sum-d)%2)==1){
			return 0;
		}
		
		else{
		int target=(sum-d)/2;
		int dp[][]=new int[n][target+1];
		for(int arr1[]:dp){
			Arrays.fill(arr1,-1);
		}
		return soln(n-1,target,arr,dp);
		}


	}
}
